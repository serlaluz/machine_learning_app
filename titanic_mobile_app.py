# -*- coding: utf-8 -*-
"""Titanic Mobile App.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bvm6UhyLIlMo8uU34Du9beBdMThRGDES
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
import warnings
warnings.filterwarnings("ignore")

titanic_data = pd.read_csv("sample_data/titanic.csv")
titanic_data.head(2)

titanic_data.columns

#check null values
titanic_data.isnull().sum()

titanic_data.info()

titanic_data.drop("Cabin", axis = 1, inplace = True)

titanic_data.isnull().sum()

# fill the values of Age Column
titanic_data['Age'].fillna((titanic_data['Age'].mean()), inplace = True)

titanic_data.isnull().sum()

#To drop all null values
titanic_data.dropna(inplace=True)

titanic_data.isnull().sum()

#create categories (dumies)
sex = pd.get_dummies(titanic_data['Sex'], drop_first=True)
sex.head()

Pcl = pd.get_dummies(titanic_data['Pclass'], drop_first=True)
Pcl.head(2)

embark = pd.get_dummies(titanic_data['Embarked'], drop_first=True)
embark.head()

titanic_data = pd.concat([titanic_data, sex, Pcl, embark], axis = 1)
titanic_data.head(2)

titanic_data.drop(["Sex","Embarked","Pclass","Name","Ticket","PassengerId"],axis=1, inplace=True)
titanic_data

#Training and testing data
X = titanic_data.drop("Survived", axis = 1)
y = titanic_data["Survived"]

from sklearn.model_selection import train_test_split


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)
model = RandomForestClassifier()
model.fit(X_train, y_train)
model.score(X_test, y_test)

#predictions
predictions = model.predict(X_test)

#metrics
from sklearn.metrics import accuracy_score
print(accuracy_score(y_test, predictions)*100)

predictions = model.predict([[22.0, 1, 0, 7.2500, 1, 0, 1, 0, 1]])
predictions

!pip install flask-ngrok

from flask_ngrok import run_with_ngrok
from flask import Flask, jsonify
app = Flask(__name__)
run_with_ngrok(app) #starts ngrok when app is running
@app.route("/<int:Age>/<int:SibSp>/<int:Parch>/<float:Fare>/<Gender>/<int:PClass>/<Place>")
def home(Age, SibSp, Parch, Fare, Gender, PClass, Place):
  p = []
  p += [Age, SibSp, Parch, Fare]
  if Gender.casefold() == "m" :
    p+=[1]
  else:
    p+=[0]
  if PClass == 2:
    p+=[1,0]
  elif PClass == 3:
    p+=[0,1]
  else:
    p+=[0,0]
  if Place.casefold() == "queenstown":
    p+=[1,0]
  elif Place.casefold() == "southampton":
    p+=[0,1]
  else:
    p+=[0,0]
  arr = np.array([p])
  predict = model.predict(arr)
  if predict == [1]:
    result = {'result' : 'Survived'}
  else:
    result = {'result' : 'Deceased'}
  return jsonify(result)
app.run()

